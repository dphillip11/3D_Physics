#define HIT_RANGE 0.0001
#define MAX_STEPS 1000
#define MAX_RANGE 40.
#define NUMBER_OF_SPHERES 3

vec4 spheres[NUMBER_OF_SPHERES] = vec4[NUMBER_OF_SPHERES](vec4(0,2,4,1),vec4(0,5,6,1),vec4(-3,10,7,1));
vec3 light_pos = vec3(5.,5.,5.);

float GetDist(vec3 emission_point)
{
    float distance_to_nearest_sphere = length(spheres[0].xyz - emission_point) - spheres[0].w;
    for (int i = 0; i < NUMBER_OF_SPHERES; i++)
    {
        float distance_to_sphere = length(spheres[i].xyz - emission_point) - spheres[i].w;
        if (distance_to_sphere < distance_to_nearest_sphere)
            distance_to_nearest_sphere = distance_to_sphere; 
    }
    float distance_to_ground_plane = emission_point.y;
    return min(distance_to_ground_plane, distance_to_nearest_sphere);
}

vec3 GetNormal(vec3 point)
{
    vec2 delta = vec2(0.01,0.);
    float d = GetDist(point);
    vec3 normal = vec3(d) - vec3(GetDist(point - delta.xyy),GetDist(point - delta.yxy),GetDist(point - delta.yyx));
    return normalize(normal);
}


float RayMarch(vec3 ray_origin, vec3 ray_direction)
{
    float distance_from_origin = 0.;
    
    for (int i = 0; i < MAX_STEPS; i ++)
    {
        vec3 emission_point = ray_origin + ray_direction * distance_from_origin;
        float deltaPosition = GetDist(emission_point);
        distance_from_origin += deltaPosition;
        if ( deltaPosition < HIT_RANGE || distance_from_origin > MAX_RANGE) 
            break;
    }
    return distance_from_origin;
}

float GetLight(vec3 point)
{
    vec3 light_dir = normalize(light_pos - point);
    if (RayMarch(point + light_dir * 0.2 ,light_dir) < length(light_pos - point))
        return 0.1;
    vec3 normal = GetNormal(point);
    float diffuseIntensity = clamp(dot(light_dir, normal),0.,1.);
    return diffuseIntensity;
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from -10 to 10)
    vec2 uv = ((4. * fragCoord)/iResolution.xy)-vec2(2.);
    
    vec3 cam_pos = vec3(5. * cos(iTime/5.) + 0.,5.,0.);
    //vec3 cam_pos = vec3(0);
    light_pos = vec3(5. * sin(iTime),15.,5.);
    vec3 ray_direction = normalize(vec3(uv,1)); //direction of each ray to the world position of each screen point
    
    float dist = RayMarch(cam_pos, ray_direction);
    vec3 color;
    if (dist <= MAX_RANGE)
    {
        vec3 point = cam_pos + ray_direction * dist;
        float diffuseIntensity = GetLight(point);
        color = vec3(diffuseIntensity);
    }
    else
    {
        color = vec3(0.,0.,1.);
    }
    // Output to screen
    fragColor = vec4(color, 1);;
}